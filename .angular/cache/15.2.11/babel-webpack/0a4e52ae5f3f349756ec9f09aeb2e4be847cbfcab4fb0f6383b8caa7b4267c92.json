{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { catchError, switchMap, tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./local-storage.service\";\nimport * as i3 from \"./error.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(_http, _localStorageService, _errorService) {\n      this._http = _http;\n      this._localStorageService = _localStorageService;\n      this._errorService = _errorService;\n      this.$User = new BehaviorSubject(null);\n    }\n    signUp(data) {\n      return this._http.post(`${environment.apiUrl}/user/register`, data).pipe(tap(res => {\n        this._localStorageService.setTokens(res.accessToken, res.refreshToken);\n        this.$User.next(res.user);\n      }), catchError(err => this._errorService.handleError(err)));\n    }\n    login(data) {\n      return this._http.post(`${environment.apiUrl}/user/login`, data).pipe(tap(res => {\n        this._localStorageService.setTokens(res.accessToken, res.refreshToken);\n        this.$User.next(res.user);\n      }), catchError(err => this._errorService.handleError(err)));\n    }\n    logout() {\n      this._localStorageService.clearTokens();\n      this.$User.next(null);\n    }\n    fetchUserData() {\n      return this._http.get(`${environment.apiUrl}/user/me`).pipe(tap(res => {\n        this.$User.next({\n          _id: res._id,\n          first_name: res.first_name,\n          role: res.role\n        });\n      }), catchError(err => this._errorService.handleError(err)));\n    }\n    editUser(data) {\n      return this._http.put(`${environment.apiUrl}/user/editProfile`, data).pipe(catchError(err => this._errorService.handleError(err)));\n    }\n    getLoggedInUserData() {\n      return this.$User.pipe(switchMap(u => {\n        if (u) {\n          return of(u);\n        }\n        const accessToken = this._localStorageService.getAccessToken();\n        if (accessToken) {\n          return this.fetchUserData();\n        }\n        return of(null);\n      }));\n    }\n    refreshToken() {\n      const refreshToken = this._localStorageService.getFreshToken();\n      return this._http.post(`${environment.apiUrl}/user/me/refresToken`, {\n        refreshToken\n      }).pipe(tap(res => {\n        console.log('Token refreshed!');\n        this._localStorageService.setTokens(res.accessToken, res.refreshToken);\n      }));\n    }\n    getBloggerProfile(bloggerId) {\n      return this._http.get(`${environment.apiUrl}/user/bloggerProfile/${bloggerId}`).pipe(catchError(err => this._errorService.handleError(err)));\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LocalStorageService), i0.ɵɵinject(i3.ErrorService));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}