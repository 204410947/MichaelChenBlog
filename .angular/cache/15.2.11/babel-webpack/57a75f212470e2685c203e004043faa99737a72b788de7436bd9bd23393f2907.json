{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, filter, switchMap, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./local-storage.service\";\nimport * as i2 from \"./auth.service\";\nimport * as i3 from \"@angular/router\";\nexport let TokenInterceptorService = /*#__PURE__*/(() => {\n  class TokenInterceptorService {\n    constructor(_localStorageService, _authService, _router) {\n      this._localStorageService = _localStorageService;\n      this._authService = _authService;\n      this._router = _router;\n      this.accessTokenSubject = new BehaviorSubject(null);\n    }\n    intercept(req, next) {\n      const accessToken = this._localStorageService.getAccessToken();\n      req = this.addAccessTokenHeader(req, accessToken);\n      return next.handle(req).pipe(catchError(err => {\n        if (err instanceof HttpErrorResponse && err.status == 401) {\n          const refreshToken = this._localStorageService.getFreshToken();\n          if (accessToken && refreshToken) {\n            return this.refreshToken(req, next);\n          }\n        } else if (err instanceof HttpErrorResponse && err.status == 403) {\n          return this.logoutAndRedirect(err);\n        } else {\n          return throwError(err);\n        }\n      }));\n    }\n    addAccessTokenHeader(req, accessToken) {\n      req = req.clone({\n        headers: req.headers.set('Authorization', `Bearer ${accessToken}`)\n      });\n      return req;\n    }\n    logoutAndRedirect(err) {\n      this._authService.logout();\n      this._router.navigate(['/login']);\n      return throwError(err);\n    }\n    refreshToken(req, next) {\n      if (!this.refreshingInProgress) {\n        this.refreshingInProgress = true;\n        this.accessTokenSubject.next(null);\n        return this._authService.refreshToken().pipe(switchMap(res => {\n          this.refreshingInProgress = false;\n          this.accessTokenSubject.next(res.accessToken);\n          req = this.addAccessTokenHeader(req, res.accessToken);\n          return next.handle(req);\n        }));\n      } else {\n        // wait while getting new token\n        return this.accessTokenSubject.pipe(filter(token => token != null), take(1), switchMap(token => {\n          req = this.addAccessTokenHeader(req, token);\n          return next.handle(req);\n        }));\n      }\n    }\n  }\n  TokenInterceptorService.ɵfac = function TokenInterceptorService_Factory(t) {\n    return new (t || TokenInterceptorService)(i0.ɵɵinject(i1.LocalStorageService), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.Router));\n  };\n  TokenInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptorService,\n    factory: TokenInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n  return TokenInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}